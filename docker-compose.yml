services:
  broker:
    image: confluentinc/cp-kafka:7.2.0
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - '9092:9092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      # KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      # KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_BOB:PLAINTEXT,LISTENER_FRED:PLAINTEXT
      KAFKA_LISTENERS: LISTENER_BOB://broker:29092,LISTENER_FRED://broker:9092
      KAFKA_ADVERTISED_LISTENERS: LISTENER_BOB://broker:29092,LISTENER_FRED://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_BOB
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG4J_ROOT_LOGLEVEL: WARN
      KAFKA_LOG4J_LOGGERS: "kafka.controller=WARN,kafka.producer.async.DefaultEventHandler=WARN,state.change.logger=WARN"

    healthcheck:
      test: [ "CMD", "nc", "-z", "broker", "29092" ] # Check if port 29092 is open
      interval: 10s
      retries: 5
      start_period: 10s
      timeout: 5s
    networks:
      - kafka-net
  schema-registry:
    image: confluentinc/cp-schema-registry:7.2.0
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      broker:
        condition: service_healthy
      zookeeper:
        condition: service_started
    ports:
      - "8081:8081"
    environment:
      # SCHEMA_REGISTRY_HOST_NAME: schema-registry # used for intercommunication
      # SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: "zookeeper:2181" #(depreciated)
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "broker:29092"
      SCHEMA_REGISTRY_HOST_NAME: "localhost"
      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8081" #(default: http://0.0.0.0:8081)
      SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: WARN
    networks:
      - kafka-net
  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - '2181:2181'
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      OOKEEPER_LOG4J_ROOT_LOGLEVEL: WARN
    networks:
      - kafka-net
  control-center:
    image: confluentinc/cp-enterprise-control-center:7.2.0
    hostname: control-center
    container_name: control-center
    depends_on:
      - zookeeper
      - broker
      - schema-registry
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
      CONTROL_CENTER_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://localhost:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      CONTROL_CENTER_LOG4J_ROOT_LOGLEVEL: WARN
      PORT: 9021
    networks:
      - kafka-net

  producer:
    build:
      context: .
      dockerfile: docker/Dockerfile.producer
    container_name: kafka-producer
    depends_on:
      broker:
        condition: service_healthy
    environment:
      BOOTSTRAP_SERVERS: broker:29092
    networks:
      - kafka-net

  # # Spark Consumer
  # # Spark Master
  spark-master:
    image: docker.io/bitnami/spark:3.2.1
    container_name: spark_master
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
    ports:
      - "8083:8083" # Spark Web UI
      - "7077:7077" # Spark master port
    depends_on:
      - broker # Ensure Kafka is up before starting Spark
    volumes:
      - ./:/app/ # Mount your Spark Streaming app
    restart: unless-stopped
    networks:
      - kafka-net

  # Spark Submit (for running the consumer script and printing to console)
  spark-submit:
    build:
      context: .
      dockerfile: docker/Dockerfile.consumer
    container_name: spark_submit
    # environment:
    # No additional environment variables needed for this task
    volumes:
      - ./consumer:/app/ # Mount your Spark Streaming app
    command: [
      "sh", "-c",
      "pip install -r /app/requirements.txt && \
      spark-submit  --packages org.apache.spark:spark-sql-kafka-0-10_2.12:3.3.3,com.clickhouse.spark:clickhouse-spark-runtime-3.3_2.12:0.8.0,com.clickhouse:clickhouse-jdbc:0.6.3 \
      --jars /opt/jars/clickhouse-jdbc-0.6.3-all.jar,/opt/jars/clickhouse-spark-runtime-3.3_2.12-0.8.0.jar \
      --conf spark.driver.extraClassPath=/opt/jars/* \
      --conf spark.executor.extraClassPath=/opt/jars/* \
      --master spark://spark-master:7077 \
      /app/consumer.py"]
    depends_on:
      - spark-master # Ensure Spark Master is up before submitting the job
      - broker # Ensure Kafka is up before submitting the job
    restart: unless-stopped
    networks:
      - kafka-net

  # Spark Worker
  spark-worker:
    image: docker.io/bitnami/spark:3.3
    container_name: spark_worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
    ports:
      - "8082:8082" # Spark Worker Web UI
    restart: unless-stopped
    networks:
      - kafka-net
  
  clickhouse:
    image: docker.io/bitnami/clickhouse:25
    container_name: clickhouse
    environment:
      CLICKHOUSE_DB: stock
      CLICKHOUSE_USER: user
      CLICKHOUSE_PASSWORD: user_password
    ports:
      - "8123:8123"
      - "9000:9000" 
    volumes:
      - clickhouse_data:/bitnami/clickhouse
    networks:
      - kafka-net

volumes:
  clickhouse_data:
    driver: local

networks:
  kafka-net:
    driver: bridge
